/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.60.0
  Forc version: 0.44.0
  Fuel-Core version: 0.20.5
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitializationErrorInput { CannotReinitialize = 'CannotReinitialize', ContractNotInitialized = 'ContractNotInitialized' };
export enum InitializationErrorOutput { CannotReinitialize = 'CannotReinitialize', ContractNotInitialized = 'ContractNotInitialized' };
export enum UserErrorInput { AmountCannotBeZero = 'AmountCannotBeZero', IncorrectAssetSent = 'IncorrectAssetSent', InsufficientBalance = 'InsufficientBalance' };
export enum UserErrorOutput { AmountCannotBeZero = 'AmountCannotBeZero', IncorrectAssetSent = 'IncorrectAssetSent', InsufficientBalance = 'InsufficientBalance' };

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { value: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type OwnershipTransferredEventInput = { previous_owner: Option<IdentityInput>, new_owner: Option<IdentityInput> };
export type OwnershipTransferredEventOutput = { previous_owner: Option<IdentityOutput>, new_owner: Option<IdentityOutput> };

interface DaoTokenAbiInterface extends Interface {
  functions: {
    owner: FunctionFragment;
    transfer_ownership: FunctionFragment;
    buy_token: FunctionFragment;
    constructor: FunctionFragment;
    decimal: FunctionFragment;
    mint_token: FunctionFragment;
    set_minter: FunctionFragment;
    total_supply: FunctionFragment;
    transfer: FunctionFragment;
    user_balance: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'owner', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'transfer_ownership', values: [Option<IdentityInput>]): Uint8Array;
  encodeFunctionData(functionFragment: 'buy_token', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'constructor', values: [Option<IdentityInput>]): Uint8Array;
  encodeFunctionData(functionFragment: 'decimal', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'mint_token', values: [IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_minter', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'total_supply', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'transfer', values: [IdentityInput, BigNumberish, AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'user_balance', values: [IdentityInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'owner', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer_ownership', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'buy_token', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'decimal', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint_token', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_minter', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_supply', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'user_balance', data: BytesLike): DecodedValue;
}

export class DaoTokenAbi extends Contract {
  interface: DaoTokenAbiInterface;
  functions: {
    owner: InvokeFunction<[], Option<IdentityOutput>>;
    transfer_ownership: InvokeFunction<[new_owner: Option<IdentityInput>], void>;
    buy_token: InvokeFunction<[], void>;
    constructor: InvokeFunction<[_owner: Option<IdentityInput>], void>;
    decimal: InvokeFunction<[], BN>;
    mint_token: InvokeFunction<[to: IdentityInput, amount: BigNumberish], void>;
    set_minter: InvokeFunction<[minter: IdentityInput], void>;
    total_supply: InvokeFunction<[], BN>;
    transfer: InvokeFunction<[to: IdentityInput, amount: BigNumberish, token_id: AssetIdInput], void>;
    user_balance: InvokeFunction<[user: IdentityInput], BN>;
  };
}
